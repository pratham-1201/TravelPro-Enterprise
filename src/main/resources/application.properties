# ===============================
# TRAVEL MANAGEMENT SYSTEM CONFIGURATION
# ===============================

# ===============================
# APPLICATION INFO
# ===============================
spring.application.name=Travel Management System

# ===============================
# SERVER CONFIGURATION
# ===============================
server.port=8080

# ===============================
# POSTGRESQL DATABASE CONFIGURATION
# ===============================
spring.datasource.url=jdbc:postgresql://localhost:5432/travel_db
spring.datasource.username=postgres
spring.datasource.password=root
spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================
# JPA/HIBERNATE CONFIGURATION
# ===============================
# update = keep existing data and update schema (recommended for development)
# create-drop = recreate tables on each restart (only use for testing)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===============================
# SECURITY CONFIGURATION
# ===============================
# Disable security for now (we'll enable it later)
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# ===============================
# LOGGING CONFIGURATION
# ===============================
logging.level.com.travelapp=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG

# ===============================
# NOTES
# ===============================
# - Make sure PostgreSQL is running on port 5432
# - Database 'travel_db' should exist
# - Change password to match your PostgreSQL setup
# - After initial setup, you can change ddl-auto to 'update' to keep data between restarts